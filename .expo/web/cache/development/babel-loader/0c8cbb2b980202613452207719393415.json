{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from \"react\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { Text } from \"../../Themed\";\nimport { IconButton } from \"../../StyledIconButton\";\nimport Context from \"../../../context/context\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar Character = function (_Component) {\n  _inherits(Character, _Component);\n\n  var _super = _createSuper(Character);\n\n  function Character(props) {\n    var _this;\n\n    _classCallCheck(this, Character);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      isEditable: false,\n      character: {},\n      title: '',\n      image: '',\n      body: '',\n      category: ''\n    };\n    _this.onEditCharacter = _this.onEditCharacter.bind(_assertThisInitialized(_this));\n    _this.onDeleteCharacter = _this.onDeleteCharacter.bind(_assertThisInitialized(_this));\n    _this.onSaveInfo = _this.onSaveInfo.bind(_assertThisInitialized(_this));\n    _this.onCancel = _this.onCancel.bind(_assertThisInitialized(_this));\n    _this.onTitleChanged = _this.onTitleChanged.bind(_assertThisInitialized(_this));\n    _this.onImageChanged = _this.onImageChanged.bind(_assertThisInitialized(_this));\n    _this.onBodyChanged = _this.onBodyChanged.bind(_assertThisInitialized(_this));\n    _this.setProperty = _this.setProperty.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(Character, [{\n    key: \"onEditCharacter\",\n    value: function onEditCharacter() {\n      this.setState({\n        isEditable: true\n      });\n    }\n  }, {\n    key: \"onTitleChanged\",\n    value: function onTitleChanged(title) {\n      console.log('state', this.state);\n      this.setState({\n        title: title\n      });\n    }\n  }, {\n    key: \"onImageChanged\",\n    value: function onImageChanged(image) {\n      this.setState({\n        image: image\n      });\n    }\n  }, {\n    key: \"onBodyChanged\",\n    value: function onBodyChanged(body) {\n      this.setState({\n        body: body\n      });\n    }\n  }, {\n    key: \"onCategoryChanged\",\n    value: function onCategoryChanged(category) {\n      this.setState({\n        category: category\n      });\n    }\n  }, {\n    key: \"setProperty\",\n    value: function setProperty(object, value, defaultValue, propName) {\n      if (value === '') {\n        object[propName] = defaultValue;\n      } else {\n        object[propName] = value;\n      }\n    }\n  }, {\n    key: \"onSaveInfo\",\n    value: function onSaveInfo() {\n      var _this$state = this.state,\n          body = _this$state.body,\n          image = _this$state.image,\n          title = _this$state.title,\n          category = _this$state.category,\n          character = _this$state.character;\n      var refreshList = this.props.refreshList;\n      this.setState({\n        isEditable: false\n      });\n      var newCharacter = {};\n      this.setProperty(newCharacter, body, character.body, 'body');\n      this.setProperty(newCharacter, image, character.image, 'image');\n      this.setProperty(newCharacter, title, character.title, 'title');\n      this.setProperty(newCharacter, category, character.category, 'category');\n      this.context.updateCharacter(refreshList, character._id, newCharacter);\n    }\n  }, {\n    key: \"onCancel\",\n    value: function onCancel() {\n      this.setState({\n        isEditable: false\n      });\n    }\n  }, {\n    key: \"onDeleteCharacter\",\n    value: function onDeleteCharacter() {\n      var _this$props = this.props,\n          character = _this$props.character,\n          refreshList = _this$props.refreshList;\n      this.context.deleteCharacter(refreshList, character._id);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state2 = this.state,\n          isEditable = _this$state2.isEditable,\n          character = _this$state2.character;\n      var body = character.body,\n          image = character.image,\n          title = character.title,\n          category = character.category;\n      return _jsxs(View, {\n        style: styles.container,\n        children: [!isEditable && _jsx(Image, {\n          style: styles.tinyLogo,\n          source: {\n            uri: image\n          }\n        }), _jsxs(View, {\n          style: styles.textContainer,\n          children: [!isEditable && _jsx(Text, {\n            style: styles.textFields,\n            lightColor: \"white\",\n            darkColor: \"white\",\n            children: title\n          }), isEditable && _jsxs(View, {\n            style: styles.editableSection,\n            children: [_jsx(Text, {\n              style: styles.textFields,\n              lightColor: \"white\",\n              darkColor: \"white\",\n              children: \"T\\xEDtulo:\"\n            }), _jsx(TextInput, {\n              style: styles.input,\n              placeholder: \"t\\xEDtulo\",\n              defaultValue: title,\n              onChangeText: this.onTitleChanged\n            })]\n          }), isEditable && _jsxs(View, {\n            style: styles.editableSection,\n            children: [_jsx(Text, {\n              style: styles.textFields,\n              lightColor: \"white\",\n              darkColor: \"white\",\n              children: \"Descripci\\xF3n:\"\n            }), _jsx(TextInput, {\n              multiline: true,\n              style: styles.inputDescription,\n              placeholder: \"Descripci\\xF3n\",\n              defaultValue: body,\n              onChangeText: this.onBodyChanged\n            })]\n          }), isEditable && _jsxs(View, {\n            style: styles.editableSection,\n            children: [_jsx(Text, {\n              style: styles.textFields,\n              lightColor: \"white\",\n              darkColor: \"white\",\n              children: \"URL:\"\n            }), _jsx(TextInput, {\n              style: styles.input,\n              placeholder: \"URL\",\n              defaultValue: image,\n              onChangeText: this.onImageChanged\n            })]\n          }), isEditable && _jsxs(View, {\n            style: styles.editableSection,\n            children: [_jsx(Text, {\n              style: styles.textFields,\n              lightColor: \"white\",\n              darkColor: \"white\",\n              children: \"Categor\\xEDa:\"\n            }), _jsx(TextInput, {\n              style: styles.input,\n              placeholder: \"Categor\\xEDa\",\n              defaultValue: category,\n              onChangeText: this.onCategoryChanged\n            })]\n          }), !isEditable && _jsxs(View, {\n            style: styles.buttonContainer,\n            children: [_jsx(IconButton, {\n              name: \"pencil\",\n              size: 30,\n              color: \"red\",\n              onPress: this.onEditCharacter\n            }), _jsx(IconButton, {\n              name: \"trash\",\n              size: 30,\n              color: \"red\",\n              onPress: this.onDeleteCharacter\n            })]\n          }), isEditable && _jsxs(View, {\n            style: styles.buttonContainer,\n            children: [_jsx(IconButton, {\n              name: \"save\",\n              size: 30,\n              color: \"red\",\n              onPress: this.onSaveInfo\n            }), _jsx(IconButton, {\n              name: \"times\",\n              size: 30,\n              color: \"red\",\n              onPress: this.onCancel\n            })]\n          })]\n        })]\n      });\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(props, state) {\n      if (props.character !== state.character) {\n        return {\n          character: props.character\n        };\n      }\n\n      return null;\n    }\n  }]);\n\n  return Character;\n}(Component);\n\nCharacter.contextType = Context;\nexport { Character as default };\nvar styles = StyleSheet.create({\n  tinyLogo: {\n    height: 400\n  },\n  buttonContainer: {\n    display: \"flex\",\n    flexDirection: \"row\",\n    flex: 1,\n    justifyContent: \"space-between\"\n  },\n  container: {\n    backgroundColor: \"black\",\n    margin: 16,\n    padding: 8,\n    width: 300\n  },\n  textContainer: {\n    flexDirection: \"column\"\n  },\n  textFields: {\n    height: 36\n  },\n  input: {\n    backgroundColor: \"white\",\n    marginVertical: 8\n  },\n  inputDescription: {\n    backgroundColor: \"white\",\n    marginVertical: 8,\n    height: 100,\n    flexWrap: 'wrap'\n  },\n  editableSection: {\n    display: \"flex\",\n    flexDirection: \"row\",\n    flex: 1,\n    justifyContent: \"space-between\"\n  }\n});","map":{"version":3,"sources":["/Users/davidproano/Documents/Projects/chapter-frontend-pruebas/components/characters/character/index.js"],"names":["React","Component","Text","IconButton","Context","Character","props","state","isEditable","character","title","image","body","category","onEditCharacter","bind","onDeleteCharacter","onSaveInfo","onCancel","onTitleChanged","onImageChanged","onBodyChanged","setProperty","setState","console","log","object","value","defaultValue","propName","refreshList","newCharacter","context","updateCharacter","_id","deleteCharacter","styles","container","tinyLogo","uri","textContainer","textFields","editableSection","input","inputDescription","onCategoryChanged","buttonContainer","contextType","StyleSheet","create","height","display","flexDirection","flex","justifyContent","backgroundColor","margin","padding","width","marginVertical","flexWrap"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { Image, StyleSheet, TextInput, View } from \"react-native\";\nimport { Text } from \"../../Themed\";\nimport { IconButton } from \"../../StyledIconButton\";\nimport Context from \"../../../context/context\";\n\nexport default class Character extends Component {\n  static contextType = Context;\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      isEditable: false,\n      character: {},\n      title: '',\n      image: '',\n      body: '', \n      category: '',\n    };\n    this.onEditCharacter = this.onEditCharacter.bind(this);\n    this.onDeleteCharacter = this.onDeleteCharacter.bind(this);\n    this.onSaveInfo = this.onSaveInfo.bind(this);\n    this.onCancel = this.onCancel.bind(this);\n    this.onTitleChanged = this.onTitleChanged.bind(this);\n    this.onImageChanged = this.onImageChanged.bind(this);\n    this.onBodyChanged = this.onBodyChanged.bind(this);\n    this.setProperty = this.setProperty.bind(this);\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.character !== state.character) {\n      return {\n        character: props.character,\n      };\n    }\n    return null;\n  }\n\n  onEditCharacter() {\n    this.setState({ isEditable: true });\n  }\n\n  onTitleChanged(title) {\n      console.log('state', this.state);\n      this.setState({ title: title });\n  }\n  onImageChanged(image) {\n    this.setState({ image: image});\n  }\n  onBodyChanged(body) {\n    this.setState({ body: body});\n  }\n\n  onCategoryChanged(category) {\n    this.setState({ category: category});\n  }\n\n \n\n  setProperty(object, value, defaultValue, propName) {\n    if(value === ''){\n        object[propName] = defaultValue;\n    } else{\n        object[propName] = value;\n    }\n  }\n\n  onSaveInfo() {\n    const { body, image, title, category, character } = this.state;\n    const { refreshList } = this.props;\n\n    this.setState({ isEditable: false });\n    let newCharacter ={};\n    this.setProperty(newCharacter, body, character.body, 'body' );\n    this.setProperty(newCharacter, image, character.image, 'image' );\n    this.setProperty(newCharacter, title, character.title, 'title' );\n    this.setProperty(newCharacter, category, character.category, 'category' );\n\n    this.context.updateCharacter(refreshList, character._id, newCharacter);\n  }\n\n  onCancel() {\n    this.setState({ isEditable: false });\n  }\n\n  onDeleteCharacter() {\n    const { character, refreshList } = this.props;\n    this.context.deleteCharacter(refreshList, character._id);\n  }\n\n  render() {\n    const { isEditable, character } = this.state;\n    const { body, image, title, category } = character;\n    return (\n      <View style={styles.container}>\n        {!isEditable && <Image\n          style={styles.tinyLogo}\n          source={{\n            uri: image,\n          }}\n        />}\n        <View style={styles.textContainer}>\n          {!isEditable && <Text style={styles.textFields} lightColor=\"white\" darkColor=\"white\">\n            {title}\n          </Text>}\n          {isEditable && (\n            <View style={styles.editableSection}>\n              <Text\n                style={styles.textFields}\n                lightColor=\"white\"\n                darkColor=\"white\"\n              >\n                Título:\n              </Text>\n              <TextInput\n                style={styles.input}\n                placeholder=\"título\"\n                defaultValue={title}\n                onChangeText={this.onTitleChanged}\n              />\n            </View>\n          )}\n          {isEditable && (\n            <View style={styles.editableSection}>\n              <Text\n                style={styles.textFields}\n                lightColor=\"white\"\n                darkColor=\"white\"\n              >\n                Descripción:\n              </Text>\n              <TextInput\n                multiline={true}\n                style={styles.inputDescription}\n                placeholder=\"Descripción\"\n                defaultValue={body}\n                onChangeText={this.onBodyChanged}\n              />\n            </View>\n          )}\n          {isEditable && (\n            <View style={styles.editableSection}>\n              <Text\n                style={styles.textFields}\n                lightColor=\"white\"\n                darkColor=\"white\"\n              >\n                URL:\n              </Text>\n              <TextInput\n                style={styles.input}\n                placeholder=\"URL\"\n                defaultValue={image}\n                onChangeText={this.onImageChanged}\n              />\n            </View>\n          )}\n          {isEditable && (\n            <View style={styles.editableSection}>\n              <Text\n                style={styles.textFields}\n                lightColor=\"white\"\n                darkColor=\"white\"\n              >\n                Categoría:\n              </Text>\n              <TextInput\n                style={styles.input}\n                placeholder=\"Categoría\"\n                defaultValue={category}\n                onChangeText={this.onCategoryChanged}\n              />\n            </View>\n          )}\n          {!isEditable && (\n            <View style={styles.buttonContainer}>\n              <IconButton\n                name=\"pencil\"\n                size={30}\n                color=\"red\"\n                onPress={this.onEditCharacter}\n              />\n              <IconButton\n                name=\"trash\"\n                size={30}\n                color=\"red\"\n                onPress={this.onDeleteCharacter}\n              />\n            </View>\n          )}\n          {isEditable && (\n            <View style={styles.buttonContainer}>\n              <IconButton\n                name=\"save\"\n                size={30}\n                color=\"red\"\n                onPress={this.onSaveInfo}\n              />\n              <IconButton\n                name=\"times\"\n                size={30}\n                color=\"red\"\n                onPress={this.onCancel}\n              />\n            </View>\n          )}\n        </View>\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  tinyLogo: {\n    height: 400,\n  },\n  buttonContainer: {\n    display: \"flex\",\n    flexDirection: \"row\",\n    flex: 1,\n    justifyContent: \"space-between\",\n  },\n  container: { backgroundColor: \"black\", margin: 16, padding: 8, width: 300 },\n  textContainer: { flexDirection: \"column\" },\n  textFields: { height: 36 },\n  input: { backgroundColor: \"white\", marginVertical: 8 },\n  inputDescription: { backgroundColor: \"white\", marginVertical: 8, height: 100, flexWrap: 'wrap' },\n  editableSection: {\n    display: \"flex\",\n    flexDirection: \"row\",\n    flex: 1,\n    justifyContent: \"space-between\",\n  },\n});\n"]},"metadata":{},"sourceType":"module"}