{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport Image from \"react-native-web/dist/exports/Image\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { Text } from \"../../Themed\";\nimport { IconButton } from \"../../StyledIconButton\";\nimport Context from \"../../../context/context\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar Character = function (_Component) {\n  _inherits(Character, _Component);\n\n  var _super = _createSuper(Character);\n\n  function Character(props) {\n    var _this;\n\n    _classCallCheck(this, Character);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      isEditable: false\n    };\n    _this.onEditCharacter = _this.onEditCharacter.bind(_assertThisInitialized(_this));\n    _this.onDeleteCharacter = _this.onDeleteCharacter.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(Character, [{\n    key: \"onEditCharacter\",\n    value: function onEditCharacter() {\n      this.setState({\n        isEditable: true\n      });\n    }\n  }, {\n    key: \"onDeleteCharacter\",\n    value: function onDeleteCharacter() {\n      var _this$props = this.props,\n          character = _this$props.character,\n          refreshList = _this$props.refreshList;\n      this.context.deleteMarvelCharacterByID(refreshList, character._id);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var character = this.props.character;\n      var isEditable = this.state.isEditable;\n      var body = character.body,\n          image = character.image,\n          title = character.title;\n      return _jsxs(View, {\n        style: styles.container,\n        children: [_jsx(Image, {\n          style: styles.tinyLogo,\n          source: {\n            uri: image\n          }\n        }), _jsxs(View, {\n          style: styles.textContainer,\n          children: [_jsx(Text, {\n            style: styles.textFields,\n            lightColor: \"white\",\n            darkColor: \"white\",\n            children: title\n          }), isEditable && _jsx(Text, {\n            style: styles.textFields,\n            lightColor: \"white\",\n            darkColor: \"white\",\n            children: body\n          }), !isEditable && _jsxs(View, {\n            style: styles.buttonContainer,\n            children: [_jsx(IconButton, {\n              name: \"pencil\",\n              size: 30,\n              color: \"red\",\n              onPress: this.onEditCharacter\n            }), _jsx(IconButton, {\n              name: \"trash\",\n              size: 30,\n              color: \"red\",\n              onPress: this.onDeleteCharacter\n            })]\n          })]\n        })]\n      });\n    }\n  }]);\n\n  return Character;\n}(Component);\n\nCharacter.contextType = Context;\nexport { Character as default };\nvar styles = StyleSheet.create({\n  tinyLogo: {\n    height: 400\n  },\n  buttonContainer: {\n    display: 'flex',\n    flexDirection: 'row',\n    flex: 1,\n    justifyContent: 'space-between'\n  },\n  container: {\n    backgroundColor: 'black',\n    margin: 16,\n    padding: 8,\n    width: 300\n  },\n  textContainer: {\n    flexDirection: 'column'\n  },\n  textFields: {\n    height: 36\n  }\n});","map":{"version":3,"sources":["/Users/davidproano/Documents/Projects/chapter-frontend-pruebas/components/characters/character/index.js"],"names":["React","Component","Text","IconButton","Context","Character","props","state","isEditable","onEditCharacter","bind","onDeleteCharacter","setState","character","refreshList","context","deleteMarvelCharacterByID","_id","body","image","title","styles","container","tinyLogo","uri","textContainer","textFields","buttonContainer","contextType","StyleSheet","create","height","display","flexDirection","flex","justifyContent","backgroundColor","margin","padding","width"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport { Image, StyleSheet, View } from 'react-native'\nimport { Text } from '../../Themed';\nimport { IconButton } from '../../StyledIconButton';\nimport Context from '../../../context/context';\n\nexport default class Character extends Component {\n    static contextType = Context;\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            isEditable: false\n        }\n        this.onEditCharacter = this.onEditCharacter.bind(this);\n        this.onDeleteCharacter = this.onDeleteCharacter.bind(this);\n    }\n\n    onEditCharacter (){\n        this.setState({ isEditable: true });\n    }\n\n    onDeleteCharacter (){\n        const { character, refreshList } = this.props;\n        this.context.deleteMarvelCharacterByID(refreshList, character._id);\n    }\n\n    render() {\n        const { character } = this.props;\n        const { isEditable } = this.state;\n        const { body, image, title } = character;\n        return (\n            <View style={styles.container}>\n                <Image\n                    style={styles.tinyLogo}\n                    source={{\n                        uri: image,\n                    }}\n                />\n                <View style={styles.textContainer}>\n                    <Text style={styles.textFields} lightColor=\"white\" darkColor='white'>{title}</Text>\n                    {isEditable && <Text style={styles.textFields} lightColor=\"white\" darkColor='white'>{body}</Text>}\n                    {!isEditable && <View style={styles.buttonContainer}>\n                        <IconButton \n                            name=\"pencil\"\n                            size={30}\n                            color=\"red\"\n                            onPress={this.onEditCharacter}\n                        />\n                        <IconButton \n                            name=\"trash\"\n                            size={30}\n                            color=\"red\"\n                            onPress={this.onDeleteCharacter}\n                        />\n                    </View>}\n                </View>\n            </View>\n        )\n    }\n}\n\nconst styles = StyleSheet.create({\n    tinyLogo: {\n        height: 400\n    },\n    buttonContainer: {\n        display: 'flex',\n        flexDirection: 'row',\n        flex: 1,\n        justifyContent: 'space-between'\n    },\n    container: {  backgroundColor: 'black', margin: 16, padding: 8, width: 300 },\n    textContainer: { flexDirection: 'column' },\n    textFields: { height: 36 }\n})\n"]},"metadata":{},"sourceType":"module"}