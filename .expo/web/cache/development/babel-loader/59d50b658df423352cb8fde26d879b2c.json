{"ast":null,"code":"import { useEffect, useContext } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { getMarvelCharacter } from \"../api\";\nimport { Text, View } from \"../components/Themed\";\nimport Context from \"../context/context\";\nimport Characters from \"../components/characters\";\nimport { mainTitle } from \"../res/strings\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function TabOneScreen(_ref) {\n  var navigation = _ref.navigation;\n  var context = useContext(Context);\n  useEffect(function () {\n    refreshList();\n    return function () {};\n  }, []);\n\n  var refreshList = function refreshList(_response) {\n    console.log('response::', _response);\n    getMarvelCharacter(function (data) {\n      context.setCharacters(data);\n    }, function () {});\n  };\n\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsx(Text, {\n      style: styles.title,\n      children: mainTitle\n    }), context && context.characters && context.characters.length > 0 && _jsx(Characters, {\n      refreshList: refreshList\n    })]\n  });\n}\nvar styles = StyleSheet.create({\n  container: {\n    alignItems: 'center',\n    flex: 1,\n    flexDirection: 'column',\n    justifyContent: 'flex-start',\n    margin: 24,\n    padding: 24\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold'\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: '80%'\n  }\n});","map":{"version":3,"sources":["/Users/davidproano/Documents/Projects/chapter-frontend-pruebas/screens/TabOneScreen.tsx"],"names":["useEffect","useContext","getMarvelCharacter","Text","View","Context","Characters","mainTitle","TabOneScreen","navigation","context","refreshList","_response","console","log","data","setCharacters","styles","container","title","characters","length","StyleSheet","create","alignItems","flex","flexDirection","justifyContent","margin","padding","fontSize","fontWeight","separator","marginVertical","height","width"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,UAApB,QAAsC,OAAtC;;AAEA,SAASC,kBAAT;AAEA,SAASC,IAAT,EAAeC,IAAf;AAEA,OAAOC,OAAP;AACA,OAAOC,UAAP;AACA,SAASC,SAAT;;;AAEA,eAAe,SAASC,YAAT,OAAoE;AAAA,MAA5CC,UAA4C,QAA5CA,UAA4C;AACjF,MAAMC,OAAO,GAAGT,UAAU,CAACI,OAAD,CAA1B;AAEAL,EAAAA,SAAS,CAAE,YAAM;AACfW,IAAAA,WAAW;AACX,WAAO,YAAM,CAAE,CAAf;AACH,GAHU,EAGR,EAHQ,CAAT;;AAKF,MAAMA,WAAW,GAAG,SAAdA,WAAc,CAACC,SAAD,EAAgC;AAClDC,IAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BF,SAA1B;AACAV,IAAAA,kBAAkB,CAAC,UAACa,IAAD,EAAe;AAChCL,MAAAA,OAAO,CAACM,aAAR,CAAsBD,IAAtB;AACD,KAFiB,EAEf,YAAM,CAAE,CAFO,CAAlB;AAGD,GALD;;AAQE,SACE,MAAC,IAAD;AAAM,IAAA,KAAK,EAAEE,MAAM,CAACC,SAApB;AAAA,eACE,KAAC,IAAD;AAAM,MAAA,KAAK,EAAED,MAAM,CAACE,KAApB;AAAA,gBAA4BZ;AAA5B,MADF,EAEGG,OAAO,IAAIA,OAAO,CAACU,UAAnB,IAAiCV,OAAO,CAACU,UAAR,CAAmBC,MAAnB,GAA4B,CAA7D,IAAkE,KAAC,UAAD;AAAY,MAAA,WAAW,EAAEV;AAAzB,MAFrE;AAAA,IADF;AAMD;AAED,IAAMM,MAAM,GAAGK,UAAU,CAACC,MAAX,CAAkB;AAC/BL,EAAAA,SAAS,EAAE;AACTM,IAAAA,UAAU,EAAE,QADH;AAETC,IAAAA,IAAI,EAAE,CAFG;AAGTC,IAAAA,aAAa,EAAE,QAHN;AAITC,IAAAA,cAAc,EAAE,YAJP;AAKTC,IAAAA,MAAM,EAAE,EALC;AAMTC,IAAAA,OAAO,EAAE;AANA,GADoB;AAS/BV,EAAAA,KAAK,EAAE;AACLW,IAAAA,QAAQ,EAAE,EADL;AAELC,IAAAA,UAAU,EAAE;AAFP,GATwB;AAa/BC,EAAAA,SAAS,EAAE;AACTC,IAAAA,cAAc,EAAE,EADP;AAETC,IAAAA,MAAM,EAAE,CAFC;AAGTC,IAAAA,KAAK,EAAE;AAHE;AAboB,CAAlB,CAAf","sourcesContent":["import { useEffect, useContext } from 'react';\nimport { Button, StyleSheet } from 'react-native';\nimport { getMarvelCharacter } from '../api';\n\nimport { Text, View } from '../components/Themed';\nimport { RootTabScreenProps } from '../types';\nimport Context from '../context/context';\nimport Characters from '../components/characters';\nimport { mainTitle } from '../res/strings';\n\nexport default function TabOneScreen({ navigation }: RootTabScreenProps<'TabOne'>) {\n  const context = useContext(Context);\n\n  useEffect (() => {\n    refreshList();\n    return () => {}\n}, [])\n\nconst refreshList = (_response: any | undefined) => {\n  console.log('response::', _response);\n  getMarvelCharacter((data: any) => {\n    context.setCharacters(data);\n  }, () => {});\n}\n\n\n  return (\n    <View style={styles.container}>\n      <Text style={styles.title}>{mainTitle}</Text>\n      {context && context.characters && context.characters.length > 0 && <Characters refreshList={refreshList} />}\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    alignItems: 'center',\n    flex: 1,\n    flexDirection: 'column',\n    justifyContent: 'flex-start',\n    margin: 24,\n    padding: 24,\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: '80%',\n  },\n});\n"]},"metadata":{},"sourceType":"module"}