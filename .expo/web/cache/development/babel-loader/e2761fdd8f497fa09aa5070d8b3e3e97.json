{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from \"react\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { Text } from \"../../Themed\";\nimport { IconButton } from \"../../StyledIconButton\";\nimport Context from \"../../../context/context\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar Character = function (_Component) {\n  _inherits(Character, _Component);\n\n  var _super = _createSuper(Character);\n\n  function Character(props) {\n    var _this;\n\n    _classCallCheck(this, Character);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      isEditable: false\n    };\n    _this.onEditCharacter = _this.onEditCharacter.bind(_assertThisInitialized(_this));\n    _this.onDeleteCharacter = _this.onDeleteCharacter.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(Character, [{\n    key: \"onEditCharacter\",\n    value: function onEditCharacter() {\n      this.setState({\n        isEditable: true\n      });\n    }\n  }, {\n    key: \"onDeleteCharacter\",\n    value: function onDeleteCharacter() {\n      var _this$props = this.props,\n          character = _this$props.character,\n          refreshList = _this$props.refreshList;\n      this.context.deleteCharacter(refreshList, character._id);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var character = this.props.character;\n      var isEditable = this.state.isEditable;\n      var body = character.body,\n          image = character.image,\n          title = character.title,\n          category = character.category;\n      return _jsxs(View, {\n        style: styles.container,\n        children: [_jsx(Image, {\n          style: styles.tinyLogo,\n          source: {\n            uri: image\n          }\n        }), _jsxs(View, {\n          style: styles.textContainer,\n          children: [_jsx(Text, {\n            style: styles.textFields,\n            lightColor: \"white\",\n            darkColor: \"white\",\n            children: title\n          }), isEditable && _jsxs(View, {\n            style: styles.editableSection,\n            children: [_jsx(Text, {\n              style: styles.textFields,\n              lightColor: \"white\",\n              darkColor: \"white\",\n              children: \"Descripci\\xF3n:\"\n            }), _jsx(TextInput, {\n              style: styles.input,\n              placeholder: \"Descripci\\xF3n\",\n              defaultValue: body\n            })]\n          }), isEditable && _jsxs(View, {\n            style: styles.editableSection,\n            children: [_jsx(Text, {\n              style: styles.textFields,\n              lightColor: \"white\",\n              darkColor: \"white\",\n              children: \"URL:\"\n            }), _jsx(TextInput, {\n              style: styles.input,\n              placeholder: \"URL\",\n              defaultValue: image\n            })]\n          }), isEditable && _jsxs(View, {\n            style: styles.editableSection,\n            children: [_jsx(Text, {\n              style: styles.textFields,\n              lightColor: \"white\",\n              darkColor: \"white\",\n              children: \"Categor\\xEDa:\"\n            }), _jsx(TextInput, {\n              style: styles.input,\n              placeholder: \"Categor\\xEDa\",\n              defaultValue: category\n            })]\n          }), !isEditable && _jsxs(View, {\n            style: styles.buttonContainer,\n            children: [_jsx(IconButton, {\n              name: \"pencil\",\n              size: 30,\n              color: \"red\",\n              onPress: this.onEditCharacter\n            }), _jsx(IconButton, {\n              name: \"trash\",\n              size: 30,\n              color: \"red\",\n              onPress: this.onDeleteCharacter\n            })]\n          }), isEditable && _jsx(View, {\n            style: styles.buttonContainer,\n            children: _jsx(IconButton, {\n              name: \"save\",\n              size: 30,\n              color: \"red\",\n              onPress: this.onSaveInfo\n            })\n          })]\n        })]\n      });\n    }\n  }]);\n\n  return Character;\n}(Component);\n\nCharacter.contextType = Context;\nexport { Character as default };\nvar styles = StyleSheet.create({\n  tinyLogo: {\n    height: 400\n  },\n  buttonContainer: {\n    display: \"flex\",\n    flexDirection: \"row\",\n    flex: 1,\n    justifyContent: \"space-between\"\n  },\n  container: {\n    backgroundColor: \"black\",\n    margin: 16,\n    padding: 8,\n    width: 300\n  },\n  textContainer: {\n    flexDirection: \"column\"\n  },\n  textFields: {\n    height: 36\n  },\n  input: {\n    backgroundColor: \"white\",\n    marginVertical: 8\n  },\n  editableSection: {\n    display: \"flex\",\n    flexDirection: \"row\",\n    flex: 1,\n    justifyContent: \"space-between\"\n  }\n});","map":{"version":3,"sources":["/Users/davidproano/Documents/Projects/chapter-frontend-pruebas/components/characters/character/index.js"],"names":["React","Component","Text","IconButton","Context","Character","props","state","isEditable","onEditCharacter","bind","onDeleteCharacter","setState","character","refreshList","context","deleteCharacter","_id","body","image","title","category","styles","container","tinyLogo","uri","textContainer","textFields","editableSection","input","buttonContainer","onSaveInfo","contextType","StyleSheet","create","height","display","flexDirection","flex","justifyContent","backgroundColor","margin","padding","width","marginVertical"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { Image, StyleSheet, TextInput, View } from \"react-native\";\nimport { Text } from \"../../Themed\";\nimport { IconButton } from \"../../StyledIconButton\";\nimport Context from \"../../../context/context\";\n\nexport default class Character extends Component {\n  static contextType = Context;\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      isEditable: false,\n    };\n    this.onEditCharacter = this.onEditCharacter.bind(this);\n    this.onDeleteCharacter = this.onDeleteCharacter.bind(this);\n  }\n\n  onEditCharacter() {\n    this.setState({ isEditable: true });\n  }\n\n  onDeleteCharacter() {\n    const { character, refreshList } = this.props;\n    this.context.deleteCharacter(refreshList, character._id);\n  }\n\n  render() {\n    const { character } = this.props;\n    const { isEditable } = this.state;\n    const { body, image, title, category } = character;\n    return (\n      <View style={styles.container}>\n        <Image\n          style={styles.tinyLogo}\n          source={{\n            uri: image,\n          }}\n        />\n        <View style={styles.textContainer}>\n          <Text style={styles.textFields} lightColor=\"white\" darkColor=\"white\">\n            {title}\n          </Text>\n          {isEditable && (\n            <View style={styles.editableSection}>\n              <Text\n                style={styles.textFields}\n                lightColor=\"white\"\n                darkColor=\"white\"\n              >\n                Descripción:\n              </Text>\n              <TextInput\n                style={styles.input}\n                placeholder=\"Descripción\"\n                defaultValue={body}\n              />\n            </View>\n          )}\n          {isEditable && (\n              <View style={styles.editableSection}>\n              <Text\n                style={styles.textFields}\n                lightColor=\"white\"\n                darkColor=\"white\"\n              >\n                URL:\n              </Text>\n              <TextInput\n                style={styles.input}\n                placeholder=\"URL\"\n                defaultValue={image}\n              />\n            </View>\n          )}\n          {isEditable && (\n            <View style={styles.editableSection}>\n            <Text\n              style={styles.textFields}\n              lightColor=\"white\"\n              darkColor=\"white\"\n            >\n              Categoría:\n            </Text>\n            <TextInput\n              style={styles.input}\n              placeholder=\"Categoría\"\n              defaultValue={category}\n            />\n          </View>\n          )}\n          {!isEditable && (\n            <View style={styles.buttonContainer}>\n              <IconButton\n                name=\"pencil\"\n                size={30}\n                color=\"red\"\n                onPress={this.onEditCharacter}\n              />\n              <IconButton\n                name=\"trash\"\n                size={30}\n                color=\"red\"\n                onPress={this.onDeleteCharacter}\n              />\n            </View>\n          )}\n          {isEditable && (\n            <View style={styles.buttonContainer}>\n              <IconButton\n                name=\"save\"\n                size={30}\n                color=\"red\"\n                onPress={this.onSaveInfo}\n              />\n            </View>\n          )}\n        </View>\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  tinyLogo: {\n    height: 400,\n  },\n  buttonContainer: {\n    display: \"flex\",\n    flexDirection: \"row\",\n    flex: 1,\n    justifyContent: \"space-between\",\n  },\n  container: { backgroundColor: \"black\", margin: 16, padding: 8, width: 300 },\n  textContainer: { flexDirection: \"column\" },\n  textFields: { height: 36 },\n  input: { backgroundColor: \"white\", marginVertical: 8 },\n  editableSection: {\n    display: \"flex\",\n    flexDirection: \"row\",\n    flex: 1,\n    justifyContent: \"space-between\",\n  },\n});\n"]},"metadata":{},"sourceType":"module"}